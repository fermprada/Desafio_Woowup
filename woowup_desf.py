# -*- coding: utf-8 -*-
"""Woowup_desf.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1imROHeiHttiDYyw55RetEkPTI4uvI8bm

# Challenge Woowup

# Ejercicio 1

## Librerías
"""

# Librerías necesarias para el proyecto
import pandas as pd
import json
from pprint import pprint
import requests

pd.options.display.max_columns = None

"""## Data Extraction"""

# URL de la request para obtener los datos
url = 'https://jumbo.vtexcommercestable.com.br/api/catalog_system/pub/products/search?_from=0&_to=49'

response = requests.get(url)


data = response.json()
print(data)

df = pd.DataFrame(data)

df

df.info()

"""## Data Exploration"""

df['items'].iloc[0]

"""El campo 'items' tiene la información sobre cada uno de los productos. Entre ellos una clave llamada 'Price' cuyo valor corresponde a los precios de cada producto.

## Data Processing

### Parte A.
Identificar el producto con mayor precio de marca “Cuisine & Co”

El campo 'Items' es un campo Object que almacena un valor en formato JSON. Para extraer el precio de dicho campo, se define una función llamada 'extract_price'
"""

def extract_price(items):
    try:
        return items[0]['sellers'][0]['commertialOffer']['Price']
    except (IndexError, KeyError, TypeError):
        return None

cuisine_co_products = df[df['brand'] == 'Cuisine & Co']

cuisine_co_products

cuisine_co_products['price'] = cuisine_co_products['items'].apply(extract_price)

max_price_product = cuisine_co_products.loc[cuisine_co_products['price'].idxmax()]
print(max_price_product)

"""### Parte B.
Exportar en un archivo CSV un listado de los 50 productos con las siguientes columnas:
* productId
* nombre
* marca
* precio de lista
* precio de oferta
* cinco campos que consideres serían los más importantes para utilizar en Marketing a través de una campaña de email.

Primero extraer las columnas de price
"""

def extract_prices(items):
    try:
        listprice = items[0]['sellers'][0]['commertialOffer']['ListPrice']
        price_without_discount = items[0]['sellers'][0]['commertialOffer']['PriceWithoutDiscount']
        full_selling_price = items[0]['sellers'][0]['commertialOffer']['FullSellingPrice']
    except (IndexError, KeyError, TypeError):
        listprice = None
        price_without_discount = None
        full_selling_price = None
    return listprice, price_without_discount, full_selling_price

# Aplicar la función al df
df[['listprice', 'PriceWithoutDiscount', 'FullSellingPrice']] = df['items'].apply(lambda x: pd.Series(extract_prices(x)))

df

# Ahora cree la nueva columna 'Offer_price' que contiene la resta de 'PriceWithoutDiscount' y 'FullSellingPrice' porque no encontre una columna en ningun lado que tuviera offerPrice
df['Offer_price'] = df['PriceWithoutDiscount'] - df['FullSellingPrice']

# Acá voy a seleccionar las columnas solicitadas
listado_productos = df[['productId', 'productName', 'brand', 'listprice', 'Offer_price']]

nuevo_df = pd.DataFrame(listado_productos)

# Voy a añadir las columnas que seleccione al DataFrame 'nuevo_df'
nuevo_df['categories'] = df['categories']
nuevo_df['link'] = df['link']
nuevo_df['description'] = df['description']
nuevo_df['País de Origen'] = df['País de Origen']
nuevo_df['productReference'] = df['productReference']

nuevo_df

"""Anadí las siguientes columnas además de las pedidas: categories,	link,	description,	País de Origen y	productReference.

1. categories: La categoría del producto puede ayudar al destinatario a entender rápidamente en qué sección de la tienda se encuentra el producto y si es relevante para ellos.

2. link: Proporcionar un enlace directo al producto en tu sitio web facilita que el destinatario acceda rápidamente a más información o realice una compra.

3. description: Una descripción concisa y persuasiva del producto puede destacar sus características y beneficios clave.

4. País de Origen: (Aunque no todos los productos lo tienen) Destacar el país de origen del producto puede ser importante para los consumidores que valoran la procedencia de los productos.

5. productReference: Proporciona un identificador único para cada producto en el catálogo y garantiza que el destinatario pueda identificar fácilmente el producto al que se hace referencia en el correo electrónico, especialmente si tienes una amplia gama de productos.
"""

ruta_guardado = 'nuevo_df.csv'
nuevo_df.to_csv(ruta_guardado, sep=';', encoding='utf-8', index=False)

"""# Ejercicio 2

Voy a hacer las consultas directamente en este ipynb, para ello voy a utilizar sqlite como base de datos.
"""

import sqlite3

conn = sqlite3.connect(':memory:')

# Voy a crear una tabla Products
conn.execute('''
CREATE TABLE Products (
    sku VARCHAR,
    nombre VARCHAR,
    categoria VARCHAR,
    precio FLOAT,
    stock INT,
    fecha_update DATETIME
);
''')

# También insertaré algunos datos de ejemplo (Solo para probar cada consulta)
data = [
    ('SKU001', 'Producto 1', 'Electrónicos', 45000, 10, '2024-01-15 08:30:00'),
    ('SKU002', 'Producto 2', 'Electrónicos', 60000, 5, '2024-02-10 12:45:00'),
    ('SKU003', 'Producto 3', 'Ropa', 35000, 15, '2024-01-20 10:00:00')
]

conn.executemany('INSERT INTO Products VALUES (?, ?, ?, ?, ?, ?)', data)

conn.commit()

def query_to_pandas(query_result):

    cols = [column[0] for column in query_result.description]
    results = pd.DataFrame.from_records(data = query_result.fetchall(), columns = cols)
    return results

"""## Query 1.
Seleccionar todos los productos de la categoría 'Electrónicos'
"""

query_a = '''
SELECT * FROM Products WHERE categoria = 'Electrónicos';
'''

execute_a = conn.execute(query_a)
result_a = execute_a.fetchall()
print("Productos de la categoría 'Electrónicos':", result_a)

# Formato Pandas
execute_a = conn.execute(query_a)
query_to_pandas(execute_a)

"""## Query 2.
Seleccionar todos los productos que pertenecen a la categoría 'Electrónicos' y tienen un precio mayor a $50.000
"""

query_b = '''
SELECT * FROM Products WHERE categoria = 'Electrónicos' AND precio > 50000;
'''

execute_b = conn.execute(query_b)
result_b = execute_b.fetchall()
print("\nProductos de la categoría 'Electrónicos' con precio mayor a $50.000:", result_b)

# Formato Pandas
execute_b = conn.execute(query_b)
query_to_pandas(execute_b)

"""## Query 3.
Seleccionar todos los productos con stock mayor a 0 y cuya fecha de actualización fue en enero de 2024
"""

query_c = '''
SELECT * FROM Products WHERE stock > 0 AND strftime('%Y-%m', fecha_update) = '2024-01';
'''

execute_c = conn.execute(query_c)
result_c = execute_c.fetchall()
print("\nProductos con stock mayor a 0 y actualizados en enero de 2024:", result_c)

# Formato Pandas
execute_c = conn.execute(query_c)
query_to_pandas(execute_c)

